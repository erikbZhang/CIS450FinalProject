* This query retreives the top 5 artists that best matches the sentiment score of the user input. 
* It uses Pearson Coefficient between song emotion scores and user input emotion scores because it's a common choice when measuring similarity between data sets. 

********** UNOPTIMIZED **********
- run time = 24 s

WITH UserInputScores AS (
    SELECT
        'depression depression depression depression suicide suicide i hate living' AS user_string,
        SUM(Words.anger) AS anger_score,
        SUM(Words.anticipation) AS anticipation_score,
        SUM(Words.disgust) AS disgust_score,
        SUM(Words.fear) AS fear_score,
        SUM(Words.joy) AS joy_score,
        SUM(Words.negative) AS negative_score,
        SUM(Words.positive) AS positive_score,
        SUM(Words.sadness) AS sadness_score,
        SUM(Words.surprise) AS surprise_score,
        SUM(Words.trust) AS trust_score
    FROM
        Words
    WHERE
        LOWER('depression depression depression depression suicide suicide i hate living') LIKE CONCAT('%', LOWER(Words.word), '%')
), ArtistScores AS (
    SELECT
        sel.artist,
        SUM(w.anger) AS anger_score,
        SUM(w.anticipation) AS anticipation_score,
        SUM(w.disgust) AS disgust_score,
        SUM(w.fear) AS fear_score,
        SUM(w.joy) AS joy_score,
        SUM(w.negative) AS negative_score,
        SUM(w.positive) AS positive_score,
        SUM(w.sadness) AS sadness_score,
        SUM(w.surprise) AS surprise_score,
        SUM(w.trust) AS trust_score
    FROM
        SongsExpandedLarge sel
        INNER JOIN Words w ON sel.song_word = w.word
    GROUP BY
        sel.artist
), TopArtists AS (
    SELECT
        sel.artist,
        SQRT(
            POWER(UserInputScores.anger_score - sel.anger_score, 2) +
            POWER(UserInputScores.anticipation_score - sel.anticipation_score, 2) +
            POWER(UserInputScores.disgust_score - sel.disgust_score, 2) +
            POWER(UserInputScores.fear_score - sel.fear_score, 2) +
            POWER(UserInputScores.joy_score - sel.joy_score, 2) +
            POWER(UserInputScores.negative_score - sel.negative_score, 2) +
            POWER(UserInputScores.positive_score - sel.positive_score, 2) +
            POWER(UserInputScores.sadness_score - sel.sadness_score, 2) +
            POWER(UserInputScores.surprise_score - sel.surprise_score, 2) +
            POWER(UserInputScores.trust_score - sel.trust_score, 2)
        ) AS distance
    FROM
        ArtistScores sel
        CROSS JOIN UserInputScores
    ORDER BY
        distance
    LIMIT 5
)
SELECT *
FROM TopArtists;

********** OPTIMIZED **********

CREATE INDEX idx_Words_word ON Words (word);
CREATE VIEW ArtistEmotionScores AS
(
  SELECT
    s.artist,
    (SELECT SUM(ss.anger_score) FROM SongScores ss WHERE ss.song_id IN (SELECT song_id FROM Songs WHERE artist = s.artist)) AS total_anger_score,
    (SELECT SUM(ss.anticipation_score) FROM SongScores ss WHERE ss.song_id IN (SELECT song_id FROM Songs WHERE artist = s.artist)) AS total_anticipation_score,
    (SELECT SUM(ss.disgust_score) FROM SongScores ss WHERE ss.song_id IN (SELECT song_id FROM Songs WHERE artist = s.artist)) AS total_disgust_score,
    (SELECT SUM(ss.fear_score) FROM SongScores ss WHERE ss.song_id IN (SELECT song_id FROM Songs WHERE artist = s.artist)) AS total_fear_score,
    (SELECT SUM(ss.joy_score) FROM SongScores ss WHERE ss.song_id IN (SELECT song_id FROM Songs WHERE artist = s.artist)) AS total_joy_score,
    (SELECT SUM(ss.negative_score) FROM SongScores ss WHERE ss.song_id IN (SELECT song_id FROM Songs WHERE artist = s.artist)) AS total_negative_score,
    (SELECT SUM(ss.positive_score) FROM SongScores ss WHERE ss.song_id IN (SELECT song_id FROM Songs WHERE artist = s.artist)) AS total_positive_score,
    (SELECT SUM(ss.sadness_score) FROM SongScores ss WHERE ss.song_id IN (SELECT song_id FROM Songs WHERE artist = s.artist)) AS total_sadness_score,
    (SELECT SUM(ss.surprise_score) FROM SongScores ss WHERE ss.song_id IN (SELECT song_id FROM Songs WHERE artist = s.artist)) AS total_surprise_score,
    (SELECT SUM(ss.trust_score) FROM SongScores ss WHERE ss.song_id IN (SELECT song_id FROM Songs WHERE artist = s.artist)) AS total_trust_score
  FROM
    Songs s
  GROUP BY
    s.artist
);

WITH UserInputScores AS (
  SELECT
    'depression depression depression depression suicide suicide i hate living' AS user_string,
    SUM(Words.anger) AS anger_score,
    SUM(Words.anticipation) AS anticipation_score,
    SUM(Words.disgust) AS disgust_score,
    SUM(Words.fear) AS fear_score,
    SUM(Words.joy) AS joy_score,
    SUM(Words.negative) AS negative_score,
    SUM(Words.positive) AS positive_score,
    SUM(Words.sadness) AS sadness_score,
    SUM(Words.surprise) AS surprise_score,
    SUM(Words.trust) AS trust_score
  FROM
    Words
  WHERE
    LOWER('depression depression depression depression suicide suicide i hate living') LIKE CONCAT('%', LOWER(Words.word), '%')
), TopArtists AS (
  SELECT
    ae.artist,
    SQRT(
      POWER(IFNULL(InputScores.anger_score, 0) - ae.total_anger_score/1000, 2) +
      POWER(IFNULL(InputScores.anticipation_score, 0) - ae.total_anticipation_score/1000, 2) +
      POWER(IFNULL(InputScores.disgust_score, 0) - ae.total_disgust_score/1000, 2) +
      POWER(IFNULL(InputScores.fear_score, 0) - ae.total_fear_score/1000, 2) +
      POWER(IFNULL(InputScores.joy_score, 0) - ae.total_joy_score/1000, 2) +
      POWER(IFNULL(InputScores.negative_score, 0) - ae.total_negative_score/1000, 2) +
      POWER(IFNULL(InputScores.positive_score, 0) - ae.total_positive_score/1000, 2) +
      POWER(IFNULL(InputScores.sadness_score, 0) - ae.total_sadness_score/1000, 2) +
      POWER(IFNULL(InputScores.surprise_score, 0) - ae.total_surprise_score/1000, 2) +
      POWER(IFNULL(InputScores.trust_score, 0) - ae.total_trust_score/1000, 2)
    ) AS distance
  FROM
    ArtistEmotionScores ae
    LEFT JOIN UserInputScores InputScores ON 1=1
  WHERE EXISTS (
    SELECT 1
    FROM ArtistEmotionScores
    WHERE artist = ae.artist AND (
      total_anger_score > 0 OR
      total_anticipation_score > 0 OR
      total_disgust_score > 0 OR
      total_fear_score > 0 OR
      total_joy_score > 0 OR
      total_negative_score > 0 OR
      total_positive_score > 0 OR
      total_sadness_score > 0 OR
      total_surprise_score > 0 OR
      total_trust_score > 0
    )
  )
  ORDER BY
    distance
  LIMIT 5
)
SELECT *
FROM TopArtists;


